// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Supabase configuration
const SUPABASE_URL = "https://mytuwopzcvaexioecyae.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15dHV3b3B6Y3ZhZXhpb2VjeWFlIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAyMjQ2NTYsImV4cCI6MjA2NTgwMDY1Nn0.MS6pxFrPPDqfjVPRsamUVyq4AzOsYDttMLaDGXiB5PA";

// Custom storage with enhanced error handling and debugging
const createCustomStorage = () => ({
  getItem: (key: string) => {
    try {
      const storedItem = localStorage.getItem(key);
      if (!storedItem) return null;
      return JSON.parse(storedItem);
    } catch (error) {
      console.error(`[Auth] Error parsing stored item ${key}:`, error);
      return null;
    }
  },
  setItem: (key: string, value: any) => {
    try {
      localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error(`[Auth] Error storing item ${key}:`, error);
    }
  },
  removeItem: (key: string) => {
    try {
      localStorage.removeItem(key);
    } catch (error) {
      console.error(`[Auth] Error removing item ${key}:`, error);
    }
  },
});

// Create the Supabase client with persistent sessions
export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      storage: createCustomStorage(),
      flowType: 'pkce', // Recommended for server-side auth
      debug: process.env.NODE_ENV === 'development',
    },
    global: {
      // Ensure we're using the latest API
      headers: { 'x-application-name': 'SearchMart-App' },
    },
  }
);

// Helper function to handle auth state changes
const handleAuthStateChange = (event: string, session: any) => {
  if (event === 'SIGNED_IN') {
    console.log('User signed in:', session?.user?.email);
  } else if (event === 'SIGNED_OUT') {
    console.log('User signed out');
  } else if (event === 'TOKEN_REFRESHED') {
    console.log('Auth token refreshed');
  } else if (event === 'USER_UPDATED') {
    console.log('User updated:', session?.user);
  }
};

// Set up auth state change listener
supabase.auth.onAuthStateChange((event, session) => {
  handleAuthStateChange(event, session);
});

// Export auth helpers
export const signInWithGoogle = async () => {
  try {
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: 'google',
      options: {
        queryParams: {
          access_type: 'offline',
          prompt: 'select_account',
        },
        redirectTo: `${window.location.origin}/profile`,
        skipBrowserRedirect: false,
      },
    });
    
    if (error) {
      console.error('Google OAuth error:', error);
      throw error;
    }
    
    return { data, error: null };
  } catch (error) {
    console.error('Error in signInWithGoogle:', error);
    return { data: null, error };
  }
};

export const signOut = async () => {
  const { error } = await supabase.auth.signOut();
  if (!error) {
    // Clear any stored session data
    localStorage.removeItem('sb-mytuwopzcvaexioecyae-auth-token');
  }
  return { error };
};